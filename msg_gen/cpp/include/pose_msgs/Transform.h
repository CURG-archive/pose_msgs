/* Auto-generated by genmsg_cpp for file /home/armuser/ros/pose_msgs/msg/Transform.msg */
#ifndef POSE_MSGS_MESSAGE_TRANSFORM_H
#define POSE_MSGS_MESSAGE_TRANSFORM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace pose_msgs
{
template <class ContainerAllocator>
struct Transform_ {
  typedef Transform_<ContainerAllocator> Type;

  Transform_()
  : time()
  , frameSrc()
  , frameDes()
  , translation()
  , rotation()
  {
  }

  Transform_(const ContainerAllocator& _alloc)
  : time()
  , frameSrc(_alloc)
  , frameDes(_alloc)
  , translation(_alloc)
  , rotation(_alloc)
  {
  }

  typedef ros::Time _time_type;
  ros::Time time;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frameSrc_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frameSrc;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frameDes_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frameDes;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _translation_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  translation;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rotation_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  rotation;


private:
  static const char* __s_getDataType_() { return "pose_msgs/Transform"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f352e813612cbf84378943a6fb493d37"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# This represents a transormation message\n\
\n\
time time\n\
string frameSrc\n\
string frameDes\n\
geometry_msgs/Vector3 translation\n\
geometry_msgs/Vector3 rotation\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, time);
    ros::serialization::serialize(stream, frameSrc);
    ros::serialization::serialize(stream, frameDes);
    ros::serialization::serialize(stream, translation);
    ros::serialization::serialize(stream, rotation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, time);
    ros::serialization::deserialize(stream, frameSrc);
    ros::serialization::deserialize(stream, frameDes);
    ros::serialization::deserialize(stream, translation);
    ros::serialization::deserialize(stream, rotation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(time);
    size += ros::serialization::serializationLength(frameSrc);
    size += ros::serialization::serializationLength(frameDes);
    size += ros::serialization::serializationLength(translation);
    size += ros::serialization::serializationLength(rotation);
    return size;
  }

  typedef boost::shared_ptr< ::pose_msgs::Transform_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pose_msgs::Transform_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Transform
typedef  ::pose_msgs::Transform_<std::allocator<void> > Transform;

typedef boost::shared_ptr< ::pose_msgs::Transform> TransformPtr;
typedef boost::shared_ptr< ::pose_msgs::Transform const> TransformConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pose_msgs::Transform_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pose_msgs::Transform_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pose_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pose_msgs::Transform_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pose_msgs::Transform_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pose_msgs::Transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f352e813612cbf84378943a6fb493d37";
  }

  static const char* value(const  ::pose_msgs::Transform_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf352e813612cbf84ULL;
  static const uint64_t static_value2 = 0x378943a6fb493d37ULL;
};

template<class ContainerAllocator>
struct DataType< ::pose_msgs::Transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pose_msgs/Transform";
  }

  static const char* value(const  ::pose_msgs::Transform_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pose_msgs::Transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This represents a transormation message\n\
\n\
time time\n\
string frameSrc\n\
string frameDes\n\
geometry_msgs/Vector3 translation\n\
geometry_msgs/Vector3 rotation\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::pose_msgs::Transform_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pose_msgs::Transform_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.time);
    stream.next(m.frameSrc);
    stream.next(m.frameDes);
    stream.next(m.translation);
    stream.next(m.rotation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Transform_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pose_msgs::Transform_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pose_msgs::Transform_<ContainerAllocator> & v) 
  {
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
    s << indent << "frameSrc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frameSrc);
    s << indent << "frameDes: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frameDes);
    s << indent << "translation: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
    s << indent << "rotation: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // POSE_MSGS_MESSAGE_TRANSFORM_H

